// schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums

enum Role {
  admin
  financial
  admission
  student
}

enum Gender {
  male
  female
}

enum PaymentStatus {
  pending
  paid
  overdue
  partial
}

enum PaymentType {
  tuition
  accommodation
  library
  other
}

// Models

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students  Student[]
}

model Faculty {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  dean        String
  establish   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  departments Department[]
  students    Student[]
}

model Department {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String     @unique
  facultyId      String     @db.ObjectId
  departmentHead String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  faculty        Faculty    @relation(fields: [facultyId], references: [id])
  courses        Course[]
  students       Student[]
}

model Course {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  code         String     @unique
  title        String
  departmentId String     @db.ObjectId
  credits      Int
  semester     String
  instructor   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  department   Department @relation(fields: [departmentId], references: [id])
}

model Student {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId         String     @unique
  userId            String     @db.ObjectId
  fullName          String
  gender            Gender
  dateOfBirth       DateTime
  placeOfBirth      String
  email             String     @unique
  phoneNumber       String
  highSchoolName    String
  highSchoolCity    String
  graduationYear    Int
  averagePass       Float
  facultyId         String     @db.ObjectId
  departmentId      String     @db.ObjectId
  session           String
  academicYear      String
  registerYear      Int
  semester          String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  user              User       @relation(fields: [userId], references: [id])
  faculty           Faculty    @relation(fields: [facultyId], references: [id])
  department        Department @relation(fields: [departmentId], references: [id])
  payments          Payment[]
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  studentId     String
  amount        Float
  paymentDate   DateTime
  dueDate       DateTime
  status        PaymentStatus
  type          PaymentType
  tuitionFee    Float?
  otherCharges  Float?
  forwarded     Float?
  extraFee      Float?
  discount      Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  student       Student       @relation(fields: [studentId], references: [studentId])
}
